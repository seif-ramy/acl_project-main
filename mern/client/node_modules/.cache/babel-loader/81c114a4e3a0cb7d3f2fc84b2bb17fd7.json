{"ast":null,"code":"const mongoose = require('mongoose');\n\nconst bcryptjs = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken'); // User Schema Or Document Structure\n\n\nconst userSchema = new mongoose.Schema({\n  FirstName: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  LastName: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  Email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  Password: {\n    type: String,\n    required: true\n  },\n  tokens: [{\n    token: {\n      type: String,\n      required: true\n    }\n  }]\n}); // Hashing Password to Secure\n\nuserSchema.pre('save', async function (next) {\n  if (this.isModified('Password')) {\n    this.Password = bcryptjs.hashSync(this.Password, 10);\n  }\n\n  next();\n}); // Generate Tokens to Verify User\n\nuserSchema.methods.generateToken = async function () {\n  try {\n    let generatedToken = jwt.sign({\n      _id: this._id\n    }, process.env.SECRET_KEY);\n    this.tokens = this.tokens.concat({\n      token: generatedToken\n    });\n    await this.save();\n    return generatedToken;\n  } catch (error) {\n    console.log(error);\n  }\n}; // Create Model\n\n\nconst Users = new mongoose.model(\"USER\", userSchema);\nmodule.exports = Users;","map":{"version":3,"sources":["/Users/seiframy/Downloads/acl_project-main/mern/client/src/schema/userSchema.js"],"names":["mongoose","require","bcryptjs","jwt","userSchema","Schema","FirstName","type","String","required","unique","LastName","Email","Password","tokens","token","pre","next","isModified","hashSync","methods","generateToken","generatedToken","sign","_id","process","env","SECRET_KEY","concat","save","error","console","log","Users","model","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB,C,CAEA;;;AACA,MAAMG,UAAU,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CAAoB;AACnCC,EAAAA,SAAS,EAAG;AACRC,IAAAA,IAAI,EAAGC,MADC;AAERC,IAAAA,QAAQ,EAAG,IAFH;AAGRC,IAAAA,MAAM,EAAG;AAHD,GADuB;AAMnCC,EAAAA,QAAQ,EAAG;AACPJ,IAAAA,IAAI,EAAGC,MADA;AAEPC,IAAAA,QAAQ,EAAG,IAFJ;AAGPC,IAAAA,MAAM,EAAG;AAHF,GANwB;AAWnCE,EAAAA,KAAK,EAAG;AACJL,IAAAA,IAAI,EAAGC,MADH;AAEJC,IAAAA,QAAQ,EAAG,IAFP;AAGJC,IAAAA,MAAM,EAAG;AAHL,GAX2B;AAgBnCG,EAAAA,QAAQ,EAAG;AACPN,IAAAA,IAAI,EAAGC,MADA;AAEPC,IAAAA,QAAQ,EAAG;AAFJ,GAhBwB;AAoBnCK,EAAAA,MAAM,EAAG,CACL;AACIC,IAAAA,KAAK,EAAG;AACJR,MAAAA,IAAI,EAAGC,MADH;AAEJC,MAAAA,QAAQ,EAAG;AAFP;AADZ,GADK;AApB0B,CAApB,CAAnB,C,CA8BA;;AACAL,UAAU,CAACY,GAAX,CAAe,MAAf,EAAuB,gBAAeC,IAAf,EAAoB;AACvC,MAAG,KAAKC,UAAL,CAAgB,UAAhB,CAAH,EAA+B;AAC3B,SAAKL,QAAL,GAAgBX,QAAQ,CAACiB,QAAT,CAAkB,KAAKN,QAAvB,EAAiC,EAAjC,CAAhB;AACH;;AACDI,EAAAA,IAAI;AACP,CALD,E,CAOA;;AACAb,UAAU,CAACgB,OAAX,CAAmBC,aAAnB,GAAmC,kBAAgB;AAC/C,MAAI;AACA,QAAIC,cAAc,GAAGnB,GAAG,CAACoB,IAAJ,CAAS;AAACC,MAAAA,GAAG,EAAG,KAAKA;AAAZ,KAAT,EAA2BC,OAAO,CAACC,GAAR,CAAYC,UAAvC,CAArB;AACA,SAAKb,MAAL,GAAc,KAAKA,MAAL,CAAYc,MAAZ,CAAmB;AAACb,MAAAA,KAAK,EAAGO;AAAT,KAAnB,CAAd;AACA,UAAM,KAAKO,IAAL,EAAN;AACA,WAAOP,cAAP;AACH,GALD,CAKE,OAAOQ,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CATD,C,CAWA;;;AACA,MAAMG,KAAK,GAAG,IAAIjC,QAAQ,CAACkC,KAAb,CAAmB,MAAnB,EAA2B9B,UAA3B,CAAd;AAEA+B,MAAM,CAACC,OAAP,GAAiBH,KAAjB","sourcesContent":["const mongoose = require('mongoose');\nconst bcryptjs = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\n// User Schema Or Document Structure\nconst userSchema = new mongoose.Schema({\n    FirstName : {\n        type : String,\n        required : true,\n        unique : true\n    },\n    LastName : {\n        type : String,\n        required : true,\n        unique : true\n    },\n    Email : {\n        type : String,\n        required : true,\n        unique : true,\n    },\n    Password : {\n        type : String,\n        required : true\n    },\n    tokens : [\n        {\n            token : {\n                type : String,\n                required : true\n            }\n        }\n    ]\n})\n\n// Hashing Password to Secure\nuserSchema.pre('save', async function(next){\n    if(this.isModified('Password')){\n        this.Password = bcryptjs.hashSync(this.Password, 10);\n    }\n    next();\n})\n\n// Generate Tokens to Verify User\nuserSchema.methods.generateToken = async function(){\n    try {\n        let generatedToken = jwt.sign({_id : this._id}, process.env.SECRET_KEY);\n        this.tokens = this.tokens.concat({token : generatedToken});\n        await this.save();\n        return generatedToken;\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n// Create Model\nconst Users = new mongoose.model(\"USER\", userSchema);\n\nmodule.exports = Users;"]},"metadata":{},"sourceType":"module"}