{"ast":null,"code":"var _jsxFileName = \"/Users/seiframy/Downloads/acl_project-main/mern/client/src/components/part2/bookings.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from \"axios\";\nimport { withRouter } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Bookings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flight_from: \"\",\n      flight_to: \"\",\n      flightNum: \"\",\n      flight_date: \"\",\n      cabin: \"\",\n      noSeats: \"\",\n      depTime: \"\",\n      arrTime: \"\",\n      terminal: \"\",\n      records: []\n    };\n  } // This will get the record based on the id from the database.\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5001/record/\" + this.props.match.params.id).then(response => {\n      this.setState({\n        flight_from: response.data.flight_from,\n        flight_to: response.data.flight_to,\n        flightNum: response.data.flightNum,\n        flight_date: response.data.flight_date,\n        cabin: response.data.cabin,\n        noSeats: response.data.noSeats,\n        depTime: response.data.depTime,\n        arrTime: response.data.arrTime,\n        terminal: response.data.terminal\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // This following section will display the update-form that takes the input from the user to update the data.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Record List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"FROM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TO\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"FLIGHT NO.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CABIN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"AVAILABLE SEATS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DEPARTURE TIME\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ARRIVAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TERMINAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.recordList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this) // <div style={{ marginTop: 22 }}>\n    //   <h3> Update Flight</h3>\n    //   <form>\n    //     <div className=\"form-group\">\n    //     <label>Flight From: </label>\n    //       <input\n    //         type=\"text\"\n    //         className=\"form-control\"\n    //         value={this.state.flight_from}\n    //         required\n    //       />\n    //     </div>\n    //     <div className=\"form-group\">\n    //       <label>Flight To: </label>\n    //       <input\n    //         type=\"text\"\n    //         className=\"form-control\"\n    //         value={this.state.flight_to}\n    //         required\n    //       />\n    //     </div>\n    //     <div className=\"form-group\">\n    //       <div className=\"form-check form-check-inline\">\n    //         <input\n    //           className=\"form-check-input\"\n    //           type=\"radio\"\n    //           name=\"priorityOptions\"\n    //           id=\"priorityLow\"\n    //           value=\"First\"\n    //           checked={this.state.cabin === \"First\"}\n    //         />\n    //         <label className=\"form-check-label\">First</label>\n    //       </div>\n    //       <div className=\"form-check form-check-inline\">\n    //         <input\n    //           className=\"form-check-input\"\n    //           type=\"radio\"\n    //           name=\"priorityOptions\"\n    //           id=\"priorityMedium\"\n    //           value=\"Business\"\n    //           checked={this.state.cabin === \"Business\"}\n    //         />\n    //         <label className=\"form-check-label\">Business</label>\n    //       </div>\n    //       <div className=\"form-check form-check-inline\">\n    //         <input\n    //           className=\"form-check-input\"\n    //           type=\"radio\"\n    //           name=\"priorityOptions\"\n    //           id=\"priorityHigh\"\n    //           value=\"Economy\"\n    //           checked={this.state.cabin === \"Economy\"}\n    //         />\n    //         <label className=\"form-check-label\">Economy</label>\n    //       </div>\n    //     </div>\n    //     <div className=\"form-group\">\n    //       <label>Number of Seats Available: </label>\n    //       <input\n    //         type=\"text\"\n    //         className=\"form-control\"\n    //         value={this.state.noSeats}\n    //         required\n    //       />\n    //     </div>         \n    //     <div className=\"form-group\">\n    //       <label>Flight Date: </label>\n    //       <input\n    //         type=\"date\" \n    //         className=\"form-control\"\n    //         value={this.state.flight_date}\n    //         required\n    //       />\n    //     </div>\n    //     <div className=\"form-group\">\n    //       <label>Flight Number: </label>\n    //       <input\n    //         type=\"text\" \n    //         className=\"form-control\"\n    //         value={this.state.flightNum}\n    //         required\n    //       />\n    //     </div>\n    //     <div className=\"form-group\">\n    //       <label>Flight Departure Time: </label>\n    //       <input\n    //         type=\"text\" \n    //         className=\"form-control\"\n    //         value={this.state.depTime}\n    //         required\n    //       />\n    //     </div>\n    //     <div className=\"form-group\">\n    //       <label>Flight Arrival Time: </label>\n    //       <input\n    //         type=\"text\" \n    //         className=\"form-control\"\n    //         value={this.state.arrTime}\n    //         required\n    //       />\n    //     </div>\n    //     <div className=\"form-group\">\n    //       <label>Airport Departure Terminal: </label>\n    //       <input\n    //         type=\"text\" \n    //         className=\"form-control\"\n    //         value={this.state.terminal}\n    //         required\n    //       />\n    //     </div>\n    //     <br />\n    //     {/* <div className=\"form-group\">\n    //       <input\n    //         type=\"submit\"\n    //         value=\"Update Record\"\n    //         className=\"btn btn-primary\"\n    //       />\n    //     </div> */}\n    //   </form>\n    // </div>\n    ;\n  }\n\n}\n\nexport default _c = withRouter(Bookings); // import React, { Component } from \"react\";\n// import axios from 'axios';\n// import { Link } from \"react-router-dom\";\n// const Record = (props) => (\n//   <tr>\n//     <td>{props.record.flight_from}</td>\n//     <td>{props.record.flight_to}</td>\n//     <td>{props.record.flightNum}</td>\n//     <td>{props.record.flight_date}</td>\n//     <td>{props.record.cabin}</td>\n//     <td>{props.record.noSeats}</td>\n//     <td>{props.record.depTime}</td>\n//     <td>{props.record.arrTime}</td>\n//     <td>{props.record.terminal}</td>\n//   </tr>\n// );\n// export default class RecordList extends Component {\n//   // This is the constructor that shall store our data retrieved from the database\n//   constructor(props) {\n//     super(props);\n//     this.state = { records: [] };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)    //this.props._id\n//       .then((response) => {\n//         this.setState({ records: response.data });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n//   // // This will get the record based on the id from the database.\n//   // componentDidMount() {\n//   //   axios\n//   //     .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//   //     .then((response) => {\n//   //       this.setState({\n//   //         flight_from: response.data.flight_from,\n//   //         flight_to: response.data.flight_to ,\n//   //         flightNum: response.data.flightNum,\n//   //         flight_date:response.data.flight_date ,\n//   //         cabin:response.data.cabin ,\n//   //         noSeats: response.data.noSeats,\n//   //         depTime: response.data.depTime,\n//   //         arrTime: response.data.arrTime,\n//   //         terminal: response.data.terminal,\n//   //       });\n//   //     })\n//   //     .catch(function (error) {\n//   //       console.log(error);\n//   //     });\n//   // }\n//   // This method will map out the users on the table\n//   recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n//   // This following section will display the table with the records of individuals.\n//   render() {\n//     return (\n//       <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n// import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n// const Record = (props) => (\n//     <tr>\n//       <td>{props.record.flight_from}</td>\n//       <td>{props.record.flight_to}</td>\n//       <td>{props.record.flightNum}</td>\n//       <td>{props.record.flight_date}</td>\n//       <td>{props.record.cabin}</td>\n//       <td>{props.record.noSeats}</td>\n//       <td>{props.record.depTime}</td>\n//       <td>{props.record.arrTime}</td>\n//       <td>{props.record.terminal}</td>\n//     </tr>\n//   );\n// class Bookings extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.onChangeFlightFrom = this.onChangeFlightFrom.bind(this);\n//     this.onChangeFlightTo = this.onChangeFlightTo.bind(this);\n//     this.onChangeFlightNo = this.onChangeFlightNo.bind(this);\n//     this.onChangeFlightDate = this.onChangeFlightDate.bind(this);\n//     this.onChangeFlightCabin = this.onChangeFlightCabin.bind(this);\n//     this.onChangeFlightSeats = this.onChangeFlightSeats.bind(this);\n//     this.onChangeFlightDep = this.onChangeFlightDep.bind(this);\n//     this.onChangeFlightArr = this.onChangeFlightArr.bind(this);\n//     this.onChangeFlightTer = this.onChangeFlightTer.bind(this);\n//     this.state = {\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//         console.log(flight_from);\n//         console.log(flight_to);\n//         console.log(flightNum);\n//         console.log(flight_date);\n//         console.log(cabin);\n//         console.log(noSeats);\n//         console.log(depTime);\n//         console.log(arrTime);\n//         console.log(terminal);\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n// //   // These methods will update the state properties.\n// //   onChangeFlightFrom(e) {\n// //     this.setState({\n// //       flight_from: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightTo(e) {\n// //     this.setState({\n// //       flight_to: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightNo(e) {\n// //     this.setState({\n// //       flightNum: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightDate(e) {\n// //     this.setState({\n// //       flight_date: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightCabin(e) {\n// //     this.setState({\n// //       cabin: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightSeats(e) {\n// //     this.setState({\n// //       noSeats: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightDep(e) {\n// //     this.setState({\n// //       depTime: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightArr(e) {\n// //     this.setState({\n// //       arrTime: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightTer(e) {\n// //     this.setState({\n// //       terminal: e.target.value,\n// //     });\n// //   }\n// //   // This function will handle the submission.\n// //   onSubmit(e) {\n// //     e.preventDefault();\n// //     const newEditedflight = {\n// //       flight_from: this.state.flight_from,\n// //       flight_to: this.state.flight_to,\n// //       flightNum: this.state.flightNum,\n// //       flight_date: this.state.flight_date,\n// //       cabin: this.state.cabin,\n// //       noSeats: this.state.noSeats,\n// //       depTime: this.state.depTime,\n// //       arrTime: this.state.arrTime,\n// //       terminal: this.state.terminal,\n// //     };\n// //     console.log(newEditedflight);\n// //     // This will send a post request to update the data in the database.\n// //     axios\n// //       .post(\n// //         \"http://localhost:5001/update/\" + this.props.match.params.id,\n// //         newEditedflight\n// //       )\n// //       .then((res) => console.log(res.data));\n// //     this.props.history.push(\"/\");\n// //     alert('Your Flight Has Been Updated.');\n// //     window.location.reload();\n// //   }\n// // This method will map out the users on the table\n// recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n//   render() {\n//     return (\n//         <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n// export default withRouter(Bookings);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/seiframy/Downloads/acl_project-main/mern/client/src/components/part2/bookings.js"],"names":["React","Component","axios","withRouter","Bookings","constructor","props","state","flight_from","flight_to","flightNum","flight_date","cabin","noSeats","depTime","arrTime","terminal","records","componentDidMount","get","match","params","id","then","response","setState","data","catch","error","console","log","render","marginTop","recordList"],"mappings":"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":["import React,  {Component}  from \"react\";\n// This will require to npm install axios\nimport axios from \"axios\";\nimport { withRouter } from \"react-router\";\n\nclass Bookings extends Component {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      flight_from: \"\",\n      flight_to: \"\",\n      flightNum: \"\",\n      flight_date: \"\",\n      cabin: \"\",\n      noSeats: \"\",\n      depTime: \"\",\n      arrTime: \"\",\n      terminal: \"\",\n      records: [],\n    };\n  }\n  // This will get the record based on the id from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n      .then((response) => {\n        this.setState({\n          flight_from: response.data.flight_from,\n          flight_to: response.data.flight_to ,\n          flightNum: response.data.flightNum,\n          flight_date:response.data.flight_date ,\n          cabin:response.data.cabin ,\n          noSeats: response.data.noSeats,\n          depTime: response.data.depTime,\n          arrTime: response.data.arrTime,\n          terminal: response.data.terminal,\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n\n\n  // This following section will display the update-form that takes the input from the user to update the data.\n  render() {\n    return (\n\n      <div>\n        <h3>Record List</h3>\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n          <thead>\n            <tr>\n              <th>FROM</th>\n              <th>TO</th>\n              <th>FLIGHT NO.</th>\n              <th>DATE</th>\n              <th>CABIN</th>\n              <th>AVAILABLE SEATS</th>\n              <th>DEPARTURE TIME</th>\n              <th>ARRIVAL</th>\n              <th>TERMINAL</th>\n            </tr>\n          </thead>\n          <tbody>{this.recordList()}</tbody>\n        </table>\n      </div>\n      // <div style={{ marginTop: 22 }}>\n      //   <h3> Update Flight</h3>\n\n      //   <form>\n      //     <div className=\"form-group\">\n      //     <label>Flight From: </label>\n      //       <input\n      //         type=\"text\"\n      //         className=\"form-control\"\n      //         value={this.state.flight_from}\n      //         required\n      //       />\n      //     </div>\n      //     <div className=\"form-group\">\n      //       <label>Flight To: </label>\n      //       <input\n      //         type=\"text\"\n      //         className=\"form-control\"\n      //         value={this.state.flight_to}\n      //         required\n      //       />\n      //     </div>\n      //     <div className=\"form-group\">\n      //       <div className=\"form-check form-check-inline\">\n      //         <input\n      //           className=\"form-check-input\"\n      //           type=\"radio\"\n      //           name=\"priorityOptions\"\n      //           id=\"priorityLow\"\n      //           value=\"First\"\n      //           checked={this.state.cabin === \"First\"}\n                \n      //         />\n      //         <label className=\"form-check-label\">First</label>\n      //       </div>\n      //       <div className=\"form-check form-check-inline\">\n      //         <input\n      //           className=\"form-check-input\"\n      //           type=\"radio\"\n      //           name=\"priorityOptions\"\n      //           id=\"priorityMedium\"\n      //           value=\"Business\"\n      //           checked={this.state.cabin === \"Business\"}\n                \n      //         />\n      //         <label className=\"form-check-label\">Business</label>\n      //       </div>\n      //       <div className=\"form-check form-check-inline\">\n      //         <input\n      //           className=\"form-check-input\"\n      //           type=\"radio\"\n      //           name=\"priorityOptions\"\n      //           id=\"priorityHigh\"\n      //           value=\"Economy\"\n      //           checked={this.state.cabin === \"Economy\"}\n                \n      //         />\n      //         <label className=\"form-check-label\">Economy</label>\n      //       </div>\n      //     </div>\n      //     <div className=\"form-group\">\n      //       <label>Number of Seats Available: </label>\n      //       <input\n      //         type=\"text\"\n      //         className=\"form-control\"\n      //         value={this.state.noSeats}\n              \n      //         required\n      //       />\n      //     </div>         \n      //     <div className=\"form-group\">\n      //       <label>Flight Date: </label>\n      //       <input\n      //         type=\"date\" \n      //         className=\"form-control\"\n      //         value={this.state.flight_date}\n              \n      //         required\n      //       />\n      //     </div>\n      //     <div className=\"form-group\">\n      //       <label>Flight Number: </label>\n      //       <input\n      //         type=\"text\" \n      //         className=\"form-control\"\n      //         value={this.state.flightNum}\n              \n      //         required\n      //       />\n      //     </div>\n      //     <div className=\"form-group\">\n      //       <label>Flight Departure Time: </label>\n      //       <input\n      //         type=\"text\" \n      //         className=\"form-control\"\n      //         value={this.state.depTime}\n              \n      //         required\n      //       />\n      //     </div>\n      //     <div className=\"form-group\">\n      //       <label>Flight Arrival Time: </label>\n      //       <input\n      //         type=\"text\" \n      //         className=\"form-control\"\n      //         value={this.state.arrTime}\n              \n      //         required\n      //       />\n      //     </div>\n      //     <div className=\"form-group\">\n      //       <label>Airport Departure Terminal: </label>\n      //       <input\n      //         type=\"text\" \n      //         className=\"form-control\"\n      //         value={this.state.terminal}\n              \n      //         required\n      //       />\n      //     </div>\n      //     <br />\n\n      //     {/* <div className=\"form-group\">\n      //       <input\n      //         type=\"submit\"\n      //         value=\"Update Record\"\n      //         className=\"btn btn-primary\"\n      //       />\n      //     </div> */}\n      //   </form>\n      // </div>\n    );\n  }\n\n}\n\nexport default withRouter(Bookings);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from \"react\";\n// import axios from 'axios';\n// import { Link } from \"react-router-dom\";\n\n// const Record = (props) => (\n//   <tr>\n//     <td>{props.record.flight_from}</td>\n//     <td>{props.record.flight_to}</td>\n//     <td>{props.record.flightNum}</td>\n//     <td>{props.record.flight_date}</td>\n//     <td>{props.record.cabin}</td>\n//     <td>{props.record.noSeats}</td>\n//     <td>{props.record.depTime}</td>\n//     <td>{props.record.arrTime}</td>\n//     <td>{props.record.terminal}</td>\n//   </tr>\n// );\n\n// export default class RecordList extends Component {\n//   // This is the constructor that shall store our data retrieved from the database\n//   constructor(props) {\n//     super(props);\n//     this.state = { records: [] };\n//   }\n\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)    //this.props._id\n//       .then((response) => {\n//         this.setState({ records: response.data });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n\n\n//   // // This will get the record based on the id from the database.\n//   // componentDidMount() {\n//   //   axios\n//   //     .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//   //     .then((response) => {\n//   //       this.setState({\n//   //         flight_from: response.data.flight_from,\n//   //         flight_to: response.data.flight_to ,\n//   //         flightNum: response.data.flightNum,\n//   //         flight_date:response.data.flight_date ,\n//   //         cabin:response.data.cabin ,\n//   //         noSeats: response.data.noSeats,\n//   //         depTime: response.data.depTime,\n//   //         arrTime: response.data.arrTime,\n//   //         terminal: response.data.terminal,\n//   //       });\n//   //     })\n//   //     .catch(function (error) {\n//   //       console.log(error);\n//   //     });\n//   // }\n\n  \n\n//   // This method will map out the users on the table\n//   recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n\n//   // This following section will display the table with the records of individuals.\n//   render() {\n//     return (\n//       <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n\n// const Record = (props) => (\n//     <tr>\n//       <td>{props.record.flight_from}</td>\n//       <td>{props.record.flight_to}</td>\n//       <td>{props.record.flightNum}</td>\n//       <td>{props.record.flight_date}</td>\n//       <td>{props.record.cabin}</td>\n//       <td>{props.record.noSeats}</td>\n//       <td>{props.record.depTime}</td>\n//       <td>{props.record.arrTime}</td>\n//       <td>{props.record.terminal}</td>\n//     </tr>\n//   );\n\n// class Bookings extends Component {\n  \n//   constructor(props) {\n//     super(props);\n\n//     this.onChangeFlightFrom = this.onChangeFlightFrom.bind(this);\n//     this.onChangeFlightTo = this.onChangeFlightTo.bind(this);\n//     this.onChangeFlightNo = this.onChangeFlightNo.bind(this);\n//     this.onChangeFlightDate = this.onChangeFlightDate.bind(this);\n//     this.onChangeFlightCabin = this.onChangeFlightCabin.bind(this);\n//     this.onChangeFlightSeats = this.onChangeFlightSeats.bind(this);\n//     this.onChangeFlightDep = this.onChangeFlightDep.bind(this);\n//     this.onChangeFlightArr = this.onChangeFlightArr.bind(this);\n//     this.onChangeFlightTer = this.onChangeFlightTer.bind(this);\n\n//     this.state = {\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//         console.log(flight_from);\n//         console.log(flight_to);\n//         console.log(flightNum);\n//         console.log(flight_date);\n//         console.log(cabin);\n//         console.log(noSeats);\n//         console.log(depTime);\n//         console.log(arrTime);\n//         console.log(terminal);\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n\n// //   // These methods will update the state properties.\n// //   onChangeFlightFrom(e) {\n// //     this.setState({\n// //       flight_from: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightTo(e) {\n// //     this.setState({\n// //       flight_to: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightNo(e) {\n// //     this.setState({\n// //       flightNum: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightDate(e) {\n// //     this.setState({\n// //       flight_date: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightCabin(e) {\n// //     this.setState({\n// //       cabin: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightSeats(e) {\n// //     this.setState({\n// //       noSeats: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightDep(e) {\n// //     this.setState({\n// //       depTime: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightArr(e) {\n// //     this.setState({\n// //       arrTime: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightTer(e) {\n// //     this.setState({\n// //       terminal: e.target.value,\n// //     });\n// //   }\n\n// //   // This function will handle the submission.\n// //   onSubmit(e) {\n// //     e.preventDefault();\n// //     const newEditedflight = {\n// //       flight_from: this.state.flight_from,\n// //       flight_to: this.state.flight_to,\n// //       flightNum: this.state.flightNum,\n// //       flight_date: this.state.flight_date,\n// //       cabin: this.state.cabin,\n// //       noSeats: this.state.noSeats,\n// //       depTime: this.state.depTime,\n// //       arrTime: this.state.arrTime,\n// //       terminal: this.state.terminal,\n// //     };\n// //     console.log(newEditedflight);\n\n\n// //     // This will send a post request to update the data in the database.\n// //     axios\n// //       .post(\n// //         \"http://localhost:5001/update/\" + this.props.match.params.id,\n// //         newEditedflight\n// //       )\n// //       .then((res) => console.log(res.data));\n\n// //     this.props.history.push(\"/\");\n// //     alert('Your Flight Has Been Updated.');\n// //     window.location.reload();\n// //   }\n\n\n// // This method will map out the users on the table\n// recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n\n//   render() {\n//     return (\n//         <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n\n// }\n\n// export default withRouter(Bookings);\n"]},"metadata":{},"sourceType":"module"}