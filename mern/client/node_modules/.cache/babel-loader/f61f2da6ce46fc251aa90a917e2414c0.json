{"ast":null,"code":"var _jsxFileName = \"/Users/seiframy/Downloads/acl_project-main/mern/client/src/components/part2/bookings.js\";\n// import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n// class Bookings extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       id:\"\",\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           id: response.data._id,\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n//   // This following section will display the update-form that takes the input from the user to update the data.\n//   render() {\n//     return (\n//       <div>\n//         <h3>My Flights</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             <tr>\n//         {/* <td>{this.props.id} </td> */}\n//         <td>{this.state.flight_from} </td>\n//         <td>{this.state.flight_to}</td>\n//         <td>{this.state.cabin}</td>\n//         <td>{this.state.noSeats}</td>\n//         <td>{this.state.flight_date}</td>\n//         <td>{this.state.flightNum}</td>\n//         <td>{this.state.depTime}</td>\n//         <td>{this.state.arrTime}</td>\n//         <td>{this.state.terminal}</td>\n//         {/* <td>\n//       <a\n//         href=\"/\"\n//         onClick={() => {\n//           if(window.confirm(\"Are You Sure You Want to Cancel This Reservation?\")){\n//             props.deleteRecord(this.state.id);\n//           }\n//         }}\n//       >\n//         Cancel Reservation\n//       </a>\n//     </td> */}\n//           </tr>\n//            </tbody>\n//         </table>\n// </div>\n//         );\n//   }\n// }\n// export default withRouter(Bookings);\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = props => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.flight_from\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.flight_to\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.flightNum\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.flight_date\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.cabin\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.noSeats\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.depTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.arrTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.terminal\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 132,\n  columnNumber: 3\n}, this);\n\n_c = Record;\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: []\n    };\n  } // This will get the record based on the id from the database.\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5001/record/\" + this.props.match.params.id) //this.props._id\n    .then(response => {\n      this.setState({\n        records: response.data\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } //   // // This will get the record based on the id from the database.\n  //   // componentDidMount() {\n  //   //   axios\n  //   //     .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n  //   //     .then((response) => {\n  //   //       this.setState({\n  //   //         flight_from: response.data.flight_from,\n  //   //         flight_to: response.data.flight_to ,\n  //   //         flightNum: response.data.flightNum,\n  //   //         flight_date:response.data.flight_date ,\n  //   //         cabin:response.data.cabin ,\n  //   //         noSeats: response.data.noSeats,\n  //   //         depTime: response.data.depTime,\n  //   //         arrTime: response.data.arrTime,\n  //   //         terminal: response.data.terminal,\n  //   //       });\n  //   //     })\n  //   //     .catch(function (error) {\n  //   //       console.log(error);\n  //   //     });\n  //   // }\n  // This method will map out the users on the table\n  // This method will map out the users on the table\n\n\n  recordList() {\n    return this.state.records.map(currentrecord => {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        record: currentrecord\n      }, currentrecord._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this);\n    });\n  } // This following section will display the table with the records of individuals.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Record List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"FROM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TO\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"FLIGHT NO.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CABIN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"AVAILABLE SEATS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DEPARTURE TIME\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ARRIVAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TERMINAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.recordList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n\n} // import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n// const Record = (props) => (\n//     <tr>\n//       <td>{props.record.flight_from}</td>\n//       <td>{props.record.flight_to}</td>\n//       <td>{props.record.flightNum}</td>\n//       <td>{props.record.flight_date}</td>\n//       <td>{props.record.cabin}</td>\n//       <td>{props.record.noSeats}</td>\n//       <td>{props.record.depTime}</td>\n//       <td>{props.record.arrTime}</td>\n//       <td>{props.record.terminal}</td>\n//     </tr>\n//   );\n// class Bookings extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.onChangeFlightFrom = this.onChangeFlightFrom.bind(this);\n//     this.onChangeFlightTo = this.onChangeFlightTo.bind(this);\n//     this.onChangeFlightNo = this.onChangeFlightNo.bind(this);\n//     this.onChangeFlightDate = this.onChangeFlightDate.bind(this);\n//     this.onChangeFlightCabin = this.onChangeFlightCabin.bind(this);\n//     this.onChangeFlightSeats = this.onChangeFlightSeats.bind(this);\n//     this.onChangeFlightDep = this.onChangeFlightDep.bind(this);\n//     this.onChangeFlightArr = this.onChangeFlightArr.bind(this);\n//     this.onChangeFlightTer = this.onChangeFlightTer.bind(this);\n//     this.state = {\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//         console.log(flight_from);\n//         console.log(flight_to);\n//         console.log(flightNum);\n//         console.log(flight_date);\n//         console.log(cabin);\n//         console.log(noSeats);\n//         console.log(depTime);\n//         console.log(arrTime);\n//         console.log(terminal);\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n// //   // These methods will update the state properties.\n// //   onChangeFlightFrom(e) {\n// //     this.setState({\n// //       flight_from: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightTo(e) {\n// //     this.setState({\n// //       flight_to: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightNo(e) {\n// //     this.setState({\n// //       flightNum: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightDate(e) {\n// //     this.setState({\n// //       flight_date: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightCabin(e) {\n// //     this.setState({\n// //       cabin: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightSeats(e) {\n// //     this.setState({\n// //       noSeats: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightDep(e) {\n// //     this.setState({\n// //       depTime: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightArr(e) {\n// //     this.setState({\n// //       arrTime: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightTer(e) {\n// //     this.setState({\n// //       terminal: e.target.value,\n// //     });\n// //   }\n// //   // This function will handle the submission.\n// //   onSubmit(e) {\n// //     e.preventDefault();\n// //     const newEditedflight = {\n// //       flight_from: this.state.flight_from,\n// //       flight_to: this.state.flight_to,\n// //       flightNum: this.state.flightNum,\n// //       flight_date: this.state.flight_date,\n// //       cabin: this.state.cabin,\n// //       noSeats: this.state.noSeats,\n// //       depTime: this.state.depTime,\n// //       arrTime: this.state.arrTime,\n// //       terminal: this.state.terminal,\n// //     };\n// //     console.log(newEditedflight);\n// //     // This will send a post request to update the data in the database.\n// //     axios\n// //       .post(\n// //         \"http://localhost:5001/update/\" + this.props.match.params.id,\n// //         newEditedflight\n// //       )\n// //       .then((res) => console.log(res.data));\n// //     this.props.history.push(\"/\");\n// //     alert('Your Flight Has Been Updated.');\n// //     window.location.reload();\n// //   }\n// // This method will map out the users on the table\n// recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n//   render() {\n//     return (\n//         <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n// export default withRouter(Bookings);\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["/Users/seiframy/Downloads/acl_project-main/mern/client/src/components/part2/bookings.js"],"names":["React","Component","axios","Link","Record","props","record","flight_from","flight_to","flightNum","flight_date","cabin","noSeats","depTime","arrTime","terminal","RecordList","constructor","state","records","componentDidMount","get","match","params","id","then","response","setState","data","catch","error","console","log","recordList","map","currentrecord","_id","render","marginTop"],"mappings":"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":["// import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n\n// class Bookings extends Component {\n  \n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       id:\"\",\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           id: response.data._id,\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n\n\n\n//   // This following section will display the update-form that takes the input from the user to update the data.\n//   render() {\n//     return (\n\n//       <div>\n//         <h3>My Flights</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             <tr>\n//         {/* <td>{this.props.id} </td> */}\n//         <td>{this.state.flight_from} </td>\n//         <td>{this.state.flight_to}</td>\n//         <td>{this.state.cabin}</td>\n//         <td>{this.state.noSeats}</td>\n//         <td>{this.state.flight_date}</td>\n//         <td>{this.state.flightNum}</td>\n//         <td>{this.state.depTime}</td>\n//         <td>{this.state.arrTime}</td>\n//         <td>{this.state.terminal}</td>\n//         {/* <td>\n//       <a\n//         href=\"/\"\n//         onClick={() => {\n//           if(window.confirm(\"Are You Sure You Want to Cancel This Reservation?\")){\n//             props.deleteRecord(this.state.id);\n//           }\n//         }}\n//       >\n//         Cancel Reservation\n//       </a>\n//     </td> */}\n//           </tr>\n//            </tbody>\n//         </table>\n      // </div>\n      \n//         );\n//   }\n\n// }\n\n// export default withRouter(Bookings);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\n\nconst Record = (props) => (\n  <tr>\n    <td>{props.record.flight_from}</td>\n    <td>{props.record.flight_to}</td>\n    <td>{props.record.flightNum}</td>\n    <td>{props.record.flight_date}</td>\n    <td>{props.record.cabin}</td>\n    <td>{props.record.noSeats}</td>\n    <td>{props.record.depTime}</td>\n    <td>{props.record.arrTime}</td>\n    <td>{props.record.terminal}</td>\n  </tr>\n);\n\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.state = { records: [] };\n  }\n\n  // This will get the record based on the id from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5001/record/\" + this.props.match.params.id)    //this.props._id\n      .then((response) => {\n        this.setState({ records: response.data });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n\n//   // // This will get the record based on the id from the database.\n//   // componentDidMount() {\n//   //   axios\n//   //     .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//   //     .then((response) => {\n//   //       this.setState({\n//   //         flight_from: response.data.flight_from,\n//   //         flight_to: response.data.flight_to ,\n//   //         flightNum: response.data.flightNum,\n//   //         flight_date:response.data.flight_date ,\n//   //         cabin:response.data.cabin ,\n//   //         noSeats: response.data.noSeats,\n//   //         depTime: response.data.depTime,\n//   //         arrTime: response.data.arrTime,\n//   //         terminal: response.data.terminal,\n//   //       });\n//   //     })\n//   //     .catch(function (error) {\n//   //       console.log(error);\n//   //     });\n//   // }\n\n  \n\n  // This method will map out the users on the table\n  // This method will map out the users on the table\n  recordList() {\n    return this.state.records.map((currentrecord) => {  \n      return (\n        <Record\n          record={currentrecord}\n          key={currentrecord._id}\n        />\n      );\n    });\n  }\n\n  // This following section will display the table with the records of individuals.\n  render() {\n    return (\n      <div>\n        <h3>Record List</h3>\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n          <thead>\n            <tr>\n              <th>FROM</th>\n              <th>TO</th>\n              <th>FLIGHT NO.</th>\n              <th>DATE</th>\n              <th>CABIN</th>\n              <th>AVAILABLE SEATS</th>\n              <th>DEPARTURE TIME</th>\n              <th>ARRIVAL</th>\n              <th>TERMINAL</th>\n            </tr>\n          </thead>\n          <tbody>{this.recordList()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n\n// const Record = (props) => (\n//     <tr>\n//       <td>{props.record.flight_from}</td>\n//       <td>{props.record.flight_to}</td>\n//       <td>{props.record.flightNum}</td>\n//       <td>{props.record.flight_date}</td>\n//       <td>{props.record.cabin}</td>\n//       <td>{props.record.noSeats}</td>\n//       <td>{props.record.depTime}</td>\n//       <td>{props.record.arrTime}</td>\n//       <td>{props.record.terminal}</td>\n//     </tr>\n//   );\n\n// class Bookings extends Component {\n  \n//   constructor(props) {\n//     super(props);\n\n//     this.onChangeFlightFrom = this.onChangeFlightFrom.bind(this);\n//     this.onChangeFlightTo = this.onChangeFlightTo.bind(this);\n//     this.onChangeFlightNo = this.onChangeFlightNo.bind(this);\n//     this.onChangeFlightDate = this.onChangeFlightDate.bind(this);\n//     this.onChangeFlightCabin = this.onChangeFlightCabin.bind(this);\n//     this.onChangeFlightSeats = this.onChangeFlightSeats.bind(this);\n//     this.onChangeFlightDep = this.onChangeFlightDep.bind(this);\n//     this.onChangeFlightArr = this.onChangeFlightArr.bind(this);\n//     this.onChangeFlightTer = this.onChangeFlightTer.bind(this);\n\n//     this.state = {\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//         console.log(flight_from);\n//         console.log(flight_to);\n//         console.log(flightNum);\n//         console.log(flight_date);\n//         console.log(cabin);\n//         console.log(noSeats);\n//         console.log(depTime);\n//         console.log(arrTime);\n//         console.log(terminal);\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n\n// //   // These methods will update the state properties.\n// //   onChangeFlightFrom(e) {\n// //     this.setState({\n// //       flight_from: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightTo(e) {\n// //     this.setState({\n// //       flight_to: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightNo(e) {\n// //     this.setState({\n// //       flightNum: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightDate(e) {\n// //     this.setState({\n// //       flight_date: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightCabin(e) {\n// //     this.setState({\n// //       cabin: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightSeats(e) {\n// //     this.setState({\n// //       noSeats: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightDep(e) {\n// //     this.setState({\n// //       depTime: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightArr(e) {\n// //     this.setState({\n// //       arrTime: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightTer(e) {\n// //     this.setState({\n// //       terminal: e.target.value,\n// //     });\n// //   }\n\n// //   // This function will handle the submission.\n// //   onSubmit(e) {\n// //     e.preventDefault();\n// //     const newEditedflight = {\n// //       flight_from: this.state.flight_from,\n// //       flight_to: this.state.flight_to,\n// //       flightNum: this.state.flightNum,\n// //       flight_date: this.state.flight_date,\n// //       cabin: this.state.cabin,\n// //       noSeats: this.state.noSeats,\n// //       depTime: this.state.depTime,\n// //       arrTime: this.state.arrTime,\n// //       terminal: this.state.terminal,\n// //     };\n// //     console.log(newEditedflight);\n\n\n// //     // This will send a post request to update the data in the database.\n// //     axios\n// //       .post(\n// //         \"http://localhost:5001/update/\" + this.props.match.params.id,\n// //         newEditedflight\n// //       )\n// //       .then((res) => console.log(res.data));\n\n// //     this.props.history.push(\"/\");\n// //     alert('Your Flight Has Been Updated.');\n// //     window.location.reload();\n// //   }\n\n\n// // This method will map out the users on the table\n// recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n\n//   render() {\n//     return (\n//         <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n\n// }\n\n// export default withRouter(Bookings);\n"]},"metadata":{},"sourceType":"module"}