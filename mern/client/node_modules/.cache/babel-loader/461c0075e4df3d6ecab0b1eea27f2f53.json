{"ast":null,"code":"var _jsxFileName = \"/Users/seiframy/Downloads/acl_project-main/mern/client/src/components/part2/bookings.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from \"axios\";\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Bookings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"\",\n      flight_from: \"\",\n      flight_to: \"\",\n      flightNum: \"\",\n      flight_date: \"\",\n      cabin: \"\",\n      noSeats: \"\",\n      depTime: \"\",\n      arrTime: \"\",\n      terminal: \"\",\n      records: []\n    };\n  } // This will get the record based on the id from the database.\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5001/record/\" + this.props.match.params.id).then(response => {\n      this.setState({\n        id: response.data._id,\n        flight_from: response.data.flight_from,\n        flight_to: response.data.flight_to,\n        flightNum: response.data.flightNum,\n        flight_date: response.data.flight_date,\n        cabin: response.data.cabin,\n        noSeats: response.data.noSeats,\n        depTime: response.data.depTime,\n        arrTime: response.data.arrTime,\n        terminal: response.data.terminal\n      });\n      var array = [];\n      array.push(response.data);\n      console.log(array[0].flight_from);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // This following section will display the update-form that takes the input from the user to update the data.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"My Flights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"FROM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TO\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"FLIGHT NO.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CABIN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"AVAILABLE SEATS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DEPARTURE TIME\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ARRIVAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"TERMINAL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [this.state.flight_from, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.flight_to\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.cabin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.noSeats\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.flight_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.flightNum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.depTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.arrTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.terminal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                to: \"/payment\",\n                children: \"Pay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 9\n              }, this), \" | \", /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/user/search\",\n                children: \"Change Flight\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 44\n              }, this), \" |\", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"http://localhost:3000/user/search\",\n                onClick: () => {\n                  if (window.confirm(\"Are You Sure You Want to Cancel This Flight?\")) {\n                    console.log(\"Cancelled\");\n                  }\n                },\n                children: \"Cancel Flight\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(Bookings); // import React, { Component } from \"react\";\n// import axios from 'axios';\n// import { Link } from \"react-router-dom\";\n// const Record = (props) => (\n//   <tr>\n//     <td>{props.record.flight_from}</td>\n//     <td>{props.record.flight_to}</td>\n//     <td>{props.record.flightNum}</td>\n//     <td>{props.record.flight_date}</td>\n//     <td>{props.record.cabin}</td>\n//     <td>{props.record.noSeats}</td>\n//     <td>{props.record.depTime}</td>\n//     <td>{props.record.arrTime}</td>\n//     <td>{props.record.terminal}</td>\n//   </tr>\n// );\n// export default class Bookings extends Component {\n//   // This is the constructor that shall store our data retrieved from the database\n//   constructor(props) {\n//     super(props);\n//     this.state = { records: [] };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)    //this.props._id\n//       .then((response) => {\n//         this.setState({ records: response.data });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n//   // // This will get the record based on the id from the database.\n//   // componentDidMount() {\n//   //   axios\n//   //     .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//   //     .then((response) => {\n//   //       this.setState({\n//   //         flight_from: response.data.flight_from,\n//   //         flight_to: response.data.flight_to ,\n//   //         flightNum: response.data.flightNum,\n//   //         flight_date:response.data.flight_date ,\n//   //         cabin:response.data.cabin ,\n//   //         noSeats: response.data.noSeats,\n//   //         depTime: response.data.depTime,\n//   //         arrTime: response.data.arrTime,\n//   //         terminal: response.data.terminal,\n//   //       });\n//   //     })\n//   //     .catch(function (error) {\n//   //       console.log(error);\n//   //     });\n//   // }\n// This method will map out the users on the table\n// This method will map out the users on the table\n//   recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n//   // This following section will display the table with the records of individuals.\n//   render() {\n//     return (\n//       <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n// import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n// const Record = (props) => (\n//     <tr>\n//       <td>{props.record.flight_from}</td>\n//       <td>{props.record.flight_to}</td>\n//       <td>{props.record.flightNum}</td>\n//       <td>{props.record.flight_date}</td>\n//       <td>{props.record.cabin}</td>\n//       <td>{props.record.noSeats}</td>\n//       <td>{props.record.depTime}</td>\n//       <td>{props.record.arrTime}</td>\n//       <td>{props.record.terminal}</td>\n//     </tr>\n//   );\n// class Bookings extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.onChangeFlightFrom = this.onChangeFlightFrom.bind(this);\n//     this.onChangeFlightTo = this.onChangeFlightTo.bind(this);\n//     this.onChangeFlightNo = this.onChangeFlightNo.bind(this);\n//     this.onChangeFlightDate = this.onChangeFlightDate.bind(this);\n//     this.onChangeFlightCabin = this.onChangeFlightCabin.bind(this);\n//     this.onChangeFlightSeats = this.onChangeFlightSeats.bind(this);\n//     this.onChangeFlightDep = this.onChangeFlightDep.bind(this);\n//     this.onChangeFlightArr = this.onChangeFlightArr.bind(this);\n//     this.onChangeFlightTer = this.onChangeFlightTer.bind(this);\n//     this.state = {\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//         console.log(flight_from);\n//         console.log(flight_to);\n//         console.log(flightNum);\n//         console.log(flight_date);\n//         console.log(cabin);\n//         console.log(noSeats);\n//         console.log(depTime);\n//         console.log(arrTime);\n//         console.log(terminal);\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n// //   // These methods will update the state properties.\n// //   onChangeFlightFrom(e) {\n// //     this.setState({\n// //       flight_from: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightTo(e) {\n// //     this.setState({\n// //       flight_to: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightNo(e) {\n// //     this.setState({\n// //       flightNum: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightDate(e) {\n// //     this.setState({\n// //       flight_date: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightCabin(e) {\n// //     this.setState({\n// //       cabin: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightSeats(e) {\n// //     this.setState({\n// //       noSeats: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightDep(e) {\n// //     this.setState({\n// //       depTime: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightArr(e) {\n// //     this.setState({\n// //       arrTime: e.target.value,\n// //     });\n// //   }\n// //   onChangeFlightTer(e) {\n// //     this.setState({\n// //       terminal: e.target.value,\n// //     });\n// //   }\n// //   // This function will handle the submission.\n// //   onSubmit(e) {\n// //     e.preventDefault();\n// //     const newEditedflight = {\n// //       flight_from: this.state.flight_from,\n// //       flight_to: this.state.flight_to,\n// //       flightNum: this.state.flightNum,\n// //       flight_date: this.state.flight_date,\n// //       cabin: this.state.cabin,\n// //       noSeats: this.state.noSeats,\n// //       depTime: this.state.depTime,\n// //       arrTime: this.state.arrTime,\n// //       terminal: this.state.terminal,\n// //     };\n// //     console.log(newEditedflight);\n// //     // This will send a post request to update the data in the database.\n// //     axios\n// //       .post(\n// //         \"http://localhost:5001/update/\" + this.props.match.params.id,\n// //         newEditedflight\n// //       )\n// //       .then((res) => console.log(res.data));\n// //     this.props.history.push(\"/\");\n// //     alert('Your Flight Has Been Updated.');\n// //     window.location.reload();\n// //   }\n// // This method will map out the users on the table\n// recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n//   render() {\n//     return (\n//         <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n// export default withRouter(Bookings);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/seiframy/Downloads/acl_project-main/mern/client/src/components/part2/bookings.js"],"names":["React","Component","axios","withRouter","Link","Bookings","constructor","props","state","id","flight_from","flight_to","flightNum","flight_date","cabin","noSeats","depTime","arrTime","terminal","records","componentDidMount","get","match","params","then","response","setState","data","_id","array","push","console","log","catch","error","render","marginTop","window","confirm"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAE/BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,EAAE,EAAC,EADQ;AAEXC,MAAAA,WAAW,EAAE,EAFF;AAGXC,MAAAA,SAAS,EAAE,EAHA;AAIXC,MAAAA,SAAS,EAAE,EAJA;AAKXC,MAAAA,WAAW,EAAE,EALF;AAMXC,MAAAA,KAAK,EAAE,EANI;AAOXC,MAAAA,OAAO,EAAE,EAPE;AAQXC,MAAAA,OAAO,EAAE,EARE;AASXC,MAAAA,OAAO,EAAE,EATE;AAUXC,MAAAA,QAAQ,EAAE,EAVC;AAWXC,MAAAA,OAAO,EAAE;AAXE,KAAb;AAaD,GAlB8B,CAmB/B;;;AACAC,EAAAA,iBAAiB,GAAG;AAClBlB,IAAAA,KAAK,CACFmB,GADH,CACO,kCAAkC,KAAKd,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAwBd,EADjE,EAEGe,IAFH,CAESC,QAAD,IAAc;AAClB,WAAKC,QAAL,CAAc;AACZjB,QAAAA,EAAE,EAAEgB,QAAQ,CAACE,IAAT,CAAcC,GADN;AAEZlB,QAAAA,WAAW,EAAEe,QAAQ,CAACE,IAAT,CAAcjB,WAFf;AAGZC,QAAAA,SAAS,EAAEc,QAAQ,CAACE,IAAT,CAAchB,SAHb;AAIZC,QAAAA,SAAS,EAAEa,QAAQ,CAACE,IAAT,CAAcf,SAJb;AAKZC,QAAAA,WAAW,EAACY,QAAQ,CAACE,IAAT,CAAcd,WALd;AAMZC,QAAAA,KAAK,EAACW,QAAQ,CAACE,IAAT,CAAcb,KANR;AAOZC,QAAAA,OAAO,EAAEU,QAAQ,CAACE,IAAT,CAAcZ,OAPX;AAQZC,QAAAA,OAAO,EAAES,QAAQ,CAACE,IAAT,CAAcX,OARX;AASZC,QAAAA,OAAO,EAAEQ,QAAQ,CAACE,IAAT,CAAcV,OATX;AAUZC,QAAAA,QAAQ,EAAEO,QAAQ,CAACE,IAAT,CAAcT;AAVZ,OAAd;AAYA,UAAIW,KAAK,GAAG,EAAZ;AACAA,MAAAA,KAAK,CAACC,IAAN,CAAWL,QAAQ,CAACE,IAApB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAAC,CAAD,CAAL,CAASnB,WAArB;AACD,KAlBH,EAmBGuB,KAnBH,CAmBS,UAAUC,KAAV,EAAiB;AACtBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KArBH;AAsBD,GA3C8B,CA+C/B;;;AACAC,EAAAA,MAAM,GAAG;AACP,wBAEE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,SAAS,EAAC,qBAAjB;AAAuC,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA9C;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAcE;AAAA,iCACE;AAAA,oCAEJ;AAAA,yBAAK,KAAK5B,KAAL,CAAWE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFI,eAGJ;AAAA,wBAAK,KAAKF,KAAL,CAAWG;AAAhB;AAAA;AAAA;AAAA;AAAA,oBAHI,eAIJ;AAAA,wBAAK,KAAKH,KAAL,CAAWM;AAAhB;AAAA;AAAA;AAAA;AAAA,oBAJI,eAKJ;AAAA,wBAAK,KAAKN,KAAL,CAAWO;AAAhB;AAAA;AAAA;AAAA;AAAA,oBALI,eAMJ;AAAA,wBAAK,KAAKP,KAAL,CAAWK;AAAhB;AAAA;AAAA;AAAA;AAAA,oBANI,eAOJ;AAAA,wBAAK,KAAKL,KAAL,CAAWI;AAAhB;AAAA;AAAA;AAAA;AAAA,oBAPI,eAQJ;AAAA,wBAAK,KAAKJ,KAAL,CAAWQ;AAAhB;AAAA;AAAA;AAAA;AAAA,oBARI,eASJ;AAAA,wBAAK,KAAKR,KAAL,CAAWS;AAAhB;AAAA;AAAA;AAAA;AAAA,oBATI,eAUJ;AAAA,wBAAK,KAAKT,KAAL,CAAWU;AAAhB;AAAA;AAAA;AAAA;AAAA,oBAVI,eAWJ;AAAA,sCACA,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAE,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,sBACmC,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAE,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADnC,qBAEF;AACE,gBAAA,IAAI,EAAE,mCADR;AAEE,gBAAA,OAAO,EAAE,MAAM;AACb,sBAAGmB,MAAM,CAACC,OAAP,CAAe,8CAAf,CAAH,EAAkE;AAChEP,oBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AACF,iBANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFE;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXI;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AA6DD;;AA9G8B;;AAkHjC,oBAAe7B,UAAU,CAACE,QAAD,CAAzB,C,CAuBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import React,  {Component}  from \"react\";\n// This will require to npm install axios\nimport axios from \"axios\";\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nclass Bookings extends Component {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id:\"\",\n      flight_from: \"\",\n      flight_to: \"\",\n      flightNum: \"\",\n      flight_date: \"\",\n      cabin: \"\",\n      noSeats: \"\",\n      depTime: \"\",\n      arrTime: \"\",\n      terminal: \"\",\n      records: [],\n    };\n  }\n  // This will get the record based on the id from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n      .then((response) => {\n        this.setState({\n          id: response.data._id,\n          flight_from: response.data.flight_from,\n          flight_to: response.data.flight_to ,\n          flightNum: response.data.flightNum,\n          flight_date:response.data.flight_date ,\n          cabin:response.data.cabin ,\n          noSeats: response.data.noSeats,\n          depTime: response.data.depTime,\n          arrTime: response.data.arrTime,\n          terminal: response.data.terminal,\n        });\n        var array = [];\n        array.push(response.data);\n        console.log(array[0].flight_from)\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n\n\n  // This following section will display the update-form that takes the input from the user to update the data.\n  render() {\n    return (\n\n      <div>\n        <h3>My Flights</h3>\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n          <thead>\n            <tr>\n              <th>FROM</th>\n              <th>TO</th>\n              <th>FLIGHT NO.</th>\n              <th>DATE</th>\n              <th>CABIN</th>\n              <th>AVAILABLE SEATS</th>\n              <th>DEPARTURE TIME</th>\n              <th>ARRIVAL</th>\n              <th>TERMINAL</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n        {/* <td>{this.props.id} </td> */}\n        <td>{this.state.flight_from} </td>\n        <td>{this.state.flight_to}</td>\n        <td>{this.state.cabin}</td>\n        <td>{this.state.noSeats}</td>\n        <td>{this.state.flight_date}</td>\n        <td>{this.state.flightNum}</td>\n        <td>{this.state.depTime}</td>\n        <td>{this.state.arrTime}</td>\n        <td>{this.state.terminal}</td>\n        <td>\n        <Link to={\"/payment\"}>Pay</Link> | <Link to={\"/user/search\"}>Change Flight</Link> | \n      <a\n        href={\"http://localhost:3000/user/search\"}\n        onClick={() => {\n          if(window.confirm(\"Are You Sure You Want to Cancel This Flight?\")){\n            console.log(\"Cancelled\")\n          }\n        }}\n      >\n        Cancel Flight\n      </a>\n    </td>\n        {/* <td>\n      <a\n        href=\"/\"\n        onClick={() => {\n          if(window.confirm(\"Are You Sure You Want to Cancel This Reservation?\")){\n            props.deleteRecord(this.state.id);\n          }\n        }}\n      >\n        Cancel Reservation\n      </a>\n    </td> */}\n          </tr>\n           </tbody>\n        </table>\n      </div>\n      \n        );\n  }\n\n}\n\nexport default withRouter(Bookings);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from \"react\";\n// import axios from 'axios';\n// import { Link } from \"react-router-dom\";\n\n// const Record = (props) => (\n//   <tr>\n//     <td>{props.record.flight_from}</td>\n//     <td>{props.record.flight_to}</td>\n//     <td>{props.record.flightNum}</td>\n//     <td>{props.record.flight_date}</td>\n//     <td>{props.record.cabin}</td>\n//     <td>{props.record.noSeats}</td>\n//     <td>{props.record.depTime}</td>\n//     <td>{props.record.arrTime}</td>\n//     <td>{props.record.terminal}</td>\n//   </tr>\n// );\n\n// export default class Bookings extends Component {\n//   // This is the constructor that shall store our data retrieved from the database\n//   constructor(props) {\n//     super(props);\n//     this.state = { records: [] };\n//   }\n\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)    //this.props._id\n//       .then((response) => {\n//         this.setState({ records: response.data });\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n\n\n//   // // This will get the record based on the id from the database.\n//   // componentDidMount() {\n//   //   axios\n//   //     .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//   //     .then((response) => {\n//   //       this.setState({\n//   //         flight_from: response.data.flight_from,\n//   //         flight_to: response.data.flight_to ,\n//   //         flightNum: response.data.flightNum,\n//   //         flight_date:response.data.flight_date ,\n//   //         cabin:response.data.cabin ,\n//   //         noSeats: response.data.noSeats,\n//   //         depTime: response.data.depTime,\n//   //         arrTime: response.data.arrTime,\n//   //         terminal: response.data.terminal,\n//   //       });\n//   //     })\n//   //     .catch(function (error) {\n//   //       console.log(error);\n//   //     });\n//   // }\n\n  \n\n  // This method will map out the users on the table\n  // This method will map out the users on the table\n//   recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n\n//   // This following section will display the table with the records of individuals.\n//   render() {\n//     return (\n//       <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React,  {Component}  from \"react\";\n// // This will require to npm install axios\n// import axios from \"axios\";\n// import { withRouter } from \"react-router\";\n\n// const Record = (props) => (\n//     <tr>\n//       <td>{props.record.flight_from}</td>\n//       <td>{props.record.flight_to}</td>\n//       <td>{props.record.flightNum}</td>\n//       <td>{props.record.flight_date}</td>\n//       <td>{props.record.cabin}</td>\n//       <td>{props.record.noSeats}</td>\n//       <td>{props.record.depTime}</td>\n//       <td>{props.record.arrTime}</td>\n//       <td>{props.record.terminal}</td>\n//     </tr>\n//   );\n\n// class Bookings extends Component {\n  \n//   constructor(props) {\n//     super(props);\n\n//     this.onChangeFlightFrom = this.onChangeFlightFrom.bind(this);\n//     this.onChangeFlightTo = this.onChangeFlightTo.bind(this);\n//     this.onChangeFlightNo = this.onChangeFlightNo.bind(this);\n//     this.onChangeFlightDate = this.onChangeFlightDate.bind(this);\n//     this.onChangeFlightCabin = this.onChangeFlightCabin.bind(this);\n//     this.onChangeFlightSeats = this.onChangeFlightSeats.bind(this);\n//     this.onChangeFlightDep = this.onChangeFlightDep.bind(this);\n//     this.onChangeFlightArr = this.onChangeFlightArr.bind(this);\n//     this.onChangeFlightTer = this.onChangeFlightTer.bind(this);\n\n//     this.state = {\n//       flight_from: \"\",\n//       flight_to: \"\",\n//       flightNum: \"\",\n//       flight_date: \"\",\n//       cabin: \"\",\n//       noSeats: \"\",\n//       depTime: \"\",\n//       arrTime: \"\",\n//       terminal: \"\",\n//       records: [],\n//     };\n//   }\n//   // This will get the record based on the id from the database.\n//   componentDidMount() {\n//     axios\n//       .get(\"http://localhost:5001/record/\" + this.props.match.params.id)\n//       .then((response) => {\n//         this.setState({\n//           flight_from: response.data.flight_from,\n//           flight_to: response.data.flight_to ,\n//           flightNum: response.data.flightNum,\n//           flight_date:response.data.flight_date ,\n//           cabin:response.data.cabin ,\n//           noSeats: response.data.noSeats,\n//           depTime: response.data.depTime,\n//           arrTime: response.data.arrTime,\n//           terminal: response.data.terminal,\n//         });\n//         console.log(flight_from);\n//         console.log(flight_to);\n//         console.log(flightNum);\n//         console.log(flight_date);\n//         console.log(cabin);\n//         console.log(noSeats);\n//         console.log(depTime);\n//         console.log(arrTime);\n//         console.log(terminal);\n//       })\n//       .catch(function (error) {\n//         console.log(error);\n//       });\n//   }\n\n// //   // These methods will update the state properties.\n// //   onChangeFlightFrom(e) {\n// //     this.setState({\n// //       flight_from: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightTo(e) {\n// //     this.setState({\n// //       flight_to: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightNo(e) {\n// //     this.setState({\n// //       flightNum: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightDate(e) {\n// //     this.setState({\n// //       flight_date: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightCabin(e) {\n// //     this.setState({\n// //       cabin: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightSeats(e) {\n// //     this.setState({\n// //       noSeats: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightDep(e) {\n// //     this.setState({\n// //       depTime: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightArr(e) {\n// //     this.setState({\n// //       arrTime: e.target.value,\n// //     });\n// //   }\n\n// //   onChangeFlightTer(e) {\n// //     this.setState({\n// //       terminal: e.target.value,\n// //     });\n// //   }\n\n// //   // This function will handle the submission.\n// //   onSubmit(e) {\n// //     e.preventDefault();\n// //     const newEditedflight = {\n// //       flight_from: this.state.flight_from,\n// //       flight_to: this.state.flight_to,\n// //       flightNum: this.state.flightNum,\n// //       flight_date: this.state.flight_date,\n// //       cabin: this.state.cabin,\n// //       noSeats: this.state.noSeats,\n// //       depTime: this.state.depTime,\n// //       arrTime: this.state.arrTime,\n// //       terminal: this.state.terminal,\n// //     };\n// //     console.log(newEditedflight);\n\n\n// //     // This will send a post request to update the data in the database.\n// //     axios\n// //       .post(\n// //         \"http://localhost:5001/update/\" + this.props.match.params.id,\n// //         newEditedflight\n// //       )\n// //       .then((res) => console.log(res.data));\n\n// //     this.props.history.push(\"/\");\n// //     alert('Your Flight Has Been Updated.');\n// //     window.location.reload();\n// //   }\n\n\n// // This method will map out the users on the table\n// recordList() {\n//     return this.state.records.map((currentrecord) => {  \n//       return (\n//         <Record\n//           record={currentrecord}\n//           key={currentrecord._id}\n//         />\n//       );\n//     });\n//   }\n\n//   render() {\n//     return (\n//         <div>\n//         <h3>Record List</h3>\n//         <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n//           <thead>\n//             <tr>\n//               <th>FROM</th>\n//               <th>TO</th>\n//               <th>FLIGHT NO.</th>\n//               <th>DATE</th>\n//               <th>CABIN</th>\n//               <th>AVAILABLE SEATS</th>\n//               <th>DEPARTURE TIME</th>\n//               <th>ARRIVAL</th>\n//               <th>TERMINAL</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.recordList()}</tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n\n// }\n\n// export default withRouter(Bookings);\n"]},"metadata":{},"sourceType":"module"}