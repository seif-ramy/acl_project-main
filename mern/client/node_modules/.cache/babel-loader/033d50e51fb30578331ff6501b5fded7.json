{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\n\nconst index_1 = __importStar(require(\"./index\"));\n\nfunction redactValidConnectionString(inputUrl, options) {\n  var _a, _b;\n\n  const url = inputUrl.clone();\n  const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';\n  const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n\n  if ((url.username || url.password) && redactUsernames) {\n    url.username = replacementString;\n    url.password = '';\n  } else if (url.password) {\n    url.password = replacementString;\n  }\n\n  if (url.searchParams.has('authMechanismProperties')) {\n    const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));\n\n    if (props.get('AWS_SESSION_TOKEN')) {\n      props.set('AWS_SESSION_TOKEN', replacementString);\n      url.searchParams.set('authMechanismProperties', props.toString());\n    }\n  }\n\n  if (url.searchParams.has('tlsCertificateKeyFilePassword')) {\n    url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);\n  }\n\n  if (url.searchParams.has('proxyUsername') && redactUsernames) {\n    url.searchParams.set('proxyUsername', replacementString);\n  }\n\n  if (url.searchParams.has('proxyPassword')) {\n    url.searchParams.set('proxyPassword', replacementString);\n  }\n\n  return url;\n}\n\nexports.redactValidConnectionString = redactValidConnectionString;\n\nfunction redactConnectionString(uri, options) {\n  var _a, _b;\n\n  const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';\n  const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n  let parsed;\n\n  try {\n    parsed = new index_1.default(uri);\n  } catch (_c) {}\n\n  if (parsed) {\n    options = { ...options,\n      replacementString: '___credentials___'\n    };\n    return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n  }\n\n  const regexes = [redactUsernames ? /(?<=\\/\\/)(.*)(?=@)/g : /(?<=\\/\\/[^@]+:)(.*)(?=@)/g, /(?<=AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, /(?<=tlsCertificateKeyFilePassword=)([^&]+)/gi, redactUsernames ? /(?<=proxyUsername=)([^&]+)/gi : null, /(?<=proxyPassword=)([^&]+)/gi];\n\n  for (const r of regexes) {\n    if (r !== null) {\n      uri = uri.replace(r, replacementString);\n    }\n  }\n\n  return uri;\n}\n\nexports.redactConnectionString = redactConnectionString;","map":{"version":3,"sources":["../src/redact.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\nconst index_1 = __importStar(require(\"./index\"));\nfunction redactValidConnectionString(inputUrl, options) {\n    var _a, _b;\n    const url = inputUrl.clone();\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    if ((url.username || url.password) && redactUsernames) {\n        url.username = replacementString;\n        url.password = '';\n    }\n    else if (url.password) {\n        url.password = replacementString;\n    }\n    if (url.searchParams.has('authMechanismProperties')) {\n        const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));\n        if (props.get('AWS_SESSION_TOKEN')) {\n            props.set('AWS_SESSION_TOKEN', replacementString);\n            url.searchParams.set('authMechanismProperties', props.toString());\n        }\n    }\n    if (url.searchParams.has('tlsCertificateKeyFilePassword')) {\n        url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);\n    }\n    if (url.searchParams.has('proxyUsername') && redactUsernames) {\n        url.searchParams.set('proxyUsername', replacementString);\n    }\n    if (url.searchParams.has('proxyPassword')) {\n        url.searchParams.set('proxyPassword', replacementString);\n    }\n    return url;\n}\nexports.redactValidConnectionString = redactValidConnectionString;\nfunction redactConnectionString(uri, options) {\n    var _a, _b;\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    let parsed;\n    try {\n        parsed = new index_1.default(uri);\n    }\n    catch (_c) { }\n    if (parsed) {\n        options = { ...options, replacementString: '___credentials___' };\n        return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n    }\n    const regexes = [\n        redactUsernames ? /(?<=\\/\\/)(.*)(?=@)/g : /(?<=\\/\\/[^@]+:)(.*)(?=@)/g,\n        /(?<=AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi,\n        /(?<=tlsCertificateKeyFilePassword=)([^&]+)/gi,\n        redactUsernames ? /(?<=proxyUsername=)([^&]+)/gi : null,\n        /(?<=proxyPassword=)([^&]+)/gi\n    ];\n    for (const r of regexes) {\n        if (r !== null) {\n            uri = uri.replace(r, replacementString);\n        }\n    }\n    return uri;\n}\nexports.redactConnectionString = redactConnectionString;\n//# sourceMappingURL=redact.js.map"]},"metadata":{},"sourceType":"script"}