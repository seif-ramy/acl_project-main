{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nexports.convert = (globalObject, value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (typeof value !== \"function\") {\n    throw new globalObject.TypeError(context + \" is not a function\");\n  }\n\n  function invokeTheCallbackFunction(...args) {\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    callResult = Reflect.apply(value, thisArg, args);\n    callResult = conversions[\"any\"](callResult, {\n      context: context,\n      globals: globalObject\n    });\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = (...args) => {\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    let callResult = Reflect.construct(value, args);\n    callResult = conversions[\"any\"](callResult, {\n      context: context,\n      globals: globalObject\n    });\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n  return invokeTheCallbackFunction;\n};","map":{"version":3,"sources":["/Users/seiframy/Downloads/acl_project-main/mern/client/node_modules/mongodb-connection-string-url/node_modules/whatwg-url/lib/Function.js"],"names":["conversions","require","utils","exports","convert","globalObject","value","context","TypeError","invokeTheCallbackFunction","args","thisArg","tryWrapperForImpl","callResult","i","length","Reflect","apply","globals","construct","wrapperSymbol","objectReference"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AAEAE,OAAO,CAACC,OAAR,GAAkB,CAACC,YAAD,EAAeC,KAAf,EAAsB;AAAEC,EAAAA,OAAO,GAAG;AAAZ,IAAqC,EAA3D,KAAkE;AAClF,MAAI,OAAOD,KAAP,KAAiB,UAArB,EAAiC;AAC/B,UAAM,IAAID,YAAY,CAACG,SAAjB,CAA2BD,OAAO,GAAG,oBAArC,CAAN;AACD;;AAED,WAASE,yBAAT,CAAmC,GAAGC,IAAtC,EAA4C;AAC1C,UAAMC,OAAO,GAAGT,KAAK,CAACU,iBAAN,CAAwB,IAAxB,CAAhB;AACA,QAAIC,UAAJ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCJ,MAAAA,IAAI,CAACI,CAAD,CAAJ,GAAUZ,KAAK,CAACU,iBAAN,CAAwBF,IAAI,CAACI,CAAD,CAA5B,CAAV;AACD;;AAEDD,IAAAA,UAAU,GAAGG,OAAO,CAACC,KAAR,CAAcX,KAAd,EAAqBK,OAArB,EAA8BD,IAA9B,CAAb;AAEAG,IAAAA,UAAU,GAAGb,WAAW,CAAC,KAAD,CAAX,CAAmBa,UAAnB,EAA+B;AAAEN,MAAAA,OAAO,EAAEA,OAAX;AAAoBW,MAAAA,OAAO,EAAEb;AAA7B,KAA/B,CAAb;AAEA,WAAOQ,UAAP;AACD;;AAEDJ,EAAAA,yBAAyB,CAACU,SAA1B,GAAsC,CAAC,GAAGT,IAAJ,KAAa;AACjD,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCJ,MAAAA,IAAI,CAACI,CAAD,CAAJ,GAAUZ,KAAK,CAACU,iBAAN,CAAwBF,IAAI,CAACI,CAAD,CAA5B,CAAV;AACD;;AAED,QAAID,UAAU,GAAGG,OAAO,CAACG,SAAR,CAAkBb,KAAlB,EAAyBI,IAAzB,CAAjB;AAEAG,IAAAA,UAAU,GAAGb,WAAW,CAAC,KAAD,CAAX,CAAmBa,UAAnB,EAA+B;AAAEN,MAAAA,OAAO,EAAEA,OAAX;AAAoBW,MAAAA,OAAO,EAAEb;AAA7B,KAA/B,CAAb;AAEA,WAAOQ,UAAP;AACD,GAVD;;AAYAJ,EAAAA,yBAAyB,CAACP,KAAK,CAACkB,aAAP,CAAzB,GAAiDd,KAAjD;AACAG,EAAAA,yBAAyB,CAACY,eAA1B,GAA4Cf,KAA5C;AAEA,SAAOG,yBAAP;AACD,CApCD","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (typeof value !== \"function\") {\n    throw new globalObject.TypeError(context + \" is not a function\");\n  }\n\n  function invokeTheCallbackFunction(...args) {\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    callResult = Reflect.apply(value, thisArg, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = (...args) => {\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    let callResult = Reflect.construct(value, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n\n  return invokeTheCallbackFunction;\n};\n"]},"metadata":{},"sourceType":"script"}